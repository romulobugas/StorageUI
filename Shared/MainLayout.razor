@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@attribute [Authorize]

@inherits LayoutComponentBase

<PageTitle>StorageUI</PageTitle>

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            @if (currentUser?.Identity?.IsAuthenticated ?? false)
            {
                <strong>@currentUser.Identity.Name</strong>
            <button @onclick="Logout">Sair</button>
            }
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    private ClaimsPrincipal currentUser;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        currentUser = authState.User;
    }

    private async Task Logout()
    {
        // Se estiver usando um serviço de autenticação personalizado com CustomAuthenticationStateProvider
        if (AuthenticationStateProvider is CustomAuthenticationStateProvider customAuthProvider)
        {
            customAuthProvider.MarkUserAsLoggedOut();
            NavigationManager.NavigateTo("/", forceLoad: true); // Ajuste o caminho conforme necessário
        }
    }

}
